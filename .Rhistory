bycountry <- as.data.frame(bycountry)
#
# # need to type cast for numerica calculation
bycountry$population = as.double(bycountry$population)
#
# # byregion includes total population and total number of stores
byregion <- bycountry %>%
select(region, population, numstore) %>%
group_by(region) %>%
summarise (population=sum(population),numstore=sum(numstore))
bycountry
byregion
us_data
head(us_data)
head(bycountry)
us_file
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population'rRank)
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population'=rank)
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population',rank=Rank)
head(us_data)
head(bycountry)
us_data <- us_data %>%
group_by(statename, state, population, rank) %>%
summarise(Stores=n())
us_data <- as.data.frame(us_data)
us_data <- us_data %>% drop_na()
rownames(us_data) <- NULL
d.choice <- colnames(us_data)[-1]
head(us_data)
head(bycountry)
# unique(datafile$region)
#
# library(ggmap)
# library(ggplot2)
#
# worldmap <- get_map(maptype = c("terrain"), zoom=1)
#
# p <- ggmap(worldmap)
# p <- p + geom_point(data=datafile, aes(x=datafile$lon, y=datafile$lat, colour="red"), size=1)
# p
head(sbux_file)
# What city or country has the highest number of Starbucks stores per capita?
# plot graph of number of stores filled by country
# What two Starbucks locations are the closest in proximity to one another?
# What location on Earth is farthest from a Starbucks?
# How has Starbucks expanded overseas?
# licensed vs partnership
library(dplyr)
library(data.table)
library(tidyr)
setwd("/Users/bruce/Desktop/DataScienceBootcamp/ShinyProject/Starbucks")
sbux_file <- fread('./starbucks_locations.csv')
pop_file  <- fread('./population_us.csv')
worldpop_file <- fread('./population_world.csv')
ctycode_file <- fread('./country_codes.csv')
# update all column names to lowercase
sbux_file <- setnames(sbux_file, tolower(colnames(sbux_file)))
# update column name to state
sbux_file <- plyr::rename(sbux_file, c("state/province"="state"))
################################# Domestic ############################################
# return all US stores
us_file <- sbux_file %>% filter(country=='US')
# create lookup table for state names
state_df  <- as.data.frame(state.name)
state_df$code=state.abb
# get state codes and population_by_state
us_file <- as.data.frame(us_file)
us_file <- us_file %>% left_join(state_df, by=c("state"="code"))
pop_file<- as.data.frame(pop_file)
us_file$state.name = as.character(us_file$state.name)
us_file <- us_file %>% left_join(pop_file, by=c("state.name"="State"))
us_file <- as.data.table(us_file)
us_data <- us_data %>%
group_by(statename, state, population) %>%
summarise(stores=n())
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population')
us_data <- as.data.table(us_data)
us_data <- us_data %>%
group_by(statename, state, population) %>%
summarise(stores=n())
us_data <- as.data.frame(us_data)
us_data <- us_data %>% drop_na()
rownames(us_data) <- NULL
d.choice <- colnames(us_data)[-1]
worldpop_file <- worldpop_file %>% select(countrycode="Country Code",population="2016")
world_data <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name',
city,
ownership=`ownership type`,
store=`store number`,
lon = longitude,
lat = latitude
)
#
# # left join on starbucks stores world wide with countrycode lookup to
# # include ISO3166-1-Alpha-3 country code to use for population data
bycountry <- NULL
bycountry <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name'
)
# # get population data for each corresponding country
bycountry <-
left_join(bycountry,worldpop_file, by=c("code3"="countrycode"))
bycountry <- bycountry %>% select ( country, code, code3, region, population)
# For some reason, Taiwan's country name was unavailable
bycountry$country[bycountry$code=='TW'] = 'Taiwan'
bycountry$region[bycountry$code=='TW'] = 'Asia'
bycountry$population[bycountry$code=='TW'] = 23500000
# # include number of stores per country
bycountry <- bycountry %>%
group_by(country,code,code3,region,population) %>%
summarise(stores=n())
bycountry <- as.data.frame(bycountry)
#
# # need to type cast for numerica calculation
bycountry$population = as.double(bycountry$population)
#
# # byregion includes total population and total number of stores
byregion <- bycountry %>%
select(region, population, numstore) %>%
group_by(region) %>%
summarise (population=sum(population),numstore=sum(numstore))
#
# # byregion includes total population and total number of stores
byregion <- bycountry %>%
select(region, population, stores) %>%
group_by(region) %>%
summarise (population=sum(population),stores=sum(stores))
# unique(datafile$region)
#
# library(ggmap)
# library(ggplot2)
#
# worldmap <- get_map(maptype = c("terrain"), zoom=1)
#
# p <- ggmap(worldmap)
# p <- p + geom_point(data=datafile, aes(x=datafile$lon, y=datafile$lat, colour="red"), size=1)
# p
head(sbux_file)
head(us_data)
head(bycountry)
sbux_file %>%
filter(country=='United States')
head(sbux_file)
sbux_file %>%
filter(country=='US')
d_lonlat <- sbux_file %>%
filter(country=='US')
head(d_lonlat)
d_lonlat <- sbux_file %>%
filter( country=='US') %>%
select( state, city, country, lon=longitude, lat=latitude)
head(d_lonlat)
g_lonlat <- sbux_file %>%
select(region, country, lon=longitude, lat=latitude)
head(g_lonlat)
g_lonlat <- sbux_file %>%
select(region, country, lon=longitude, lat=latitude)
head(sbux_file)
d_lonlat <- sbux_file %>%
filter (country=='US') %>%
select( state, city, country, lon=longitude, lat=latitude, postcode)
head(d_lonlat)
class(d_lonlat$postcode)
d_lonlat$postcode
strsub(d_lonlat$postcode, 0, 5)
substr(d_lonlat$postcode, 0, 5)
d_lonlat$postcode = substr(d_lonlat$postcode, 0, 5)
head(d_lonlat)
g_lonlat <- sbux_file %>%
select(region, country, lon=longitude, lat=latitude)
g_lonlat <- sbux_file %>%
select(country, lon=longitude, lat=latitude)
head(g_lonlat)
shiny::runApp()
runApp()
runApp()
# What city or country has the highest number of Starbucks stores per capita?
# plot graph of number of stores filled by country
# What two Starbucks locations are the closest in proximity to one another?
# What location on Earth is farthest from a Starbucks?
# How has Starbucks expanded overseas?
# licensed vs partnership
library(dplyr)
library(data.table)
library(tidyr)
setwd("/Users/bruce/Desktop/DataScienceBootcamp/ShinyProject/Starbucks")
sbux_file <- fread('./starbucks_locations.csv')
pop_file  <- fread('./population_us.csv')
worldpop_file <- fread('./population_world.csv')
ctycode_file <- fread('./country_codes.csv')
# update all column names to lowercase
sbux_file <- setnames(sbux_file, tolower(colnames(sbux_file)))
# update column name to state
sbux_file <- plyr::rename(sbux_file, c("state/province"="state"))
d_lonlat <- sbux_file %>%
filter (country=='US') %>%
select( state, city, country, lon=longitude, lat=latitude, postcode)
d_lonlat$postcode = substr(d_lonlat$postcode, 0, 5)
g_lonlat <- sbux_file %>%
select(country, lon=longitude, lat=latitude)
################################# Domestic ############################################
# return all US stores
us_file <- sbux_file %>% filter(country=='US')
# create lookup table for state names
state_df  <- as.data.frame(state.name)
state_df$code=state.abb
# get state codes and population_by_state
us_file <- as.data.frame(us_file)
us_file <- us_file %>% left_join(state_df, by=c("state"="code"))
pop_file<- as.data.frame(pop_file)
us_file$state.name = as.character(us_file$state.name)
us_file <- us_file %>% left_join(pop_file, by=c("state.name"="State"))
us_file <- as.data.table(us_file)
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population')
us_data <- as.data.table(us_data)
us_data <- us_data %>%
group_by(statename, state, population) %>%
summarise(stores=n())
us_data <- as.data.frame(us_data)
us_data <- us_data %>% drop_na()
rownames(us_data) <- NULL
d.choice <- colnames(us_data)[-1]
worldpop_file <- worldpop_file %>% select(countrycode="Country Code",population="2016")
world_data <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name',
city,
ownership=`ownership type`,
store=`store number`,
lon = longitude,
lat = latitude
)
#
# # left join on starbucks stores world wide with countrycode lookup to
# # include ISO3166-1-Alpha-3 country code to use for population data
bycountry <- NULL
bycountry <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name'
)
# # get population data for each corresponding country
bycountry <-
left_join(bycountry,worldpop_file, by=c("code3"="countrycode"))
bycountry <- bycountry %>% select ( country, code, code3, region, population)
# For some reason, Taiwan's country name was unavailable
bycountry$country[bycountry$code=='TW'] = 'Taiwan'
bycountry$region[bycountry$code=='TW'] = 'Asia'
bycountry$population[bycountry$code=='TW'] = 23500000
# # include number of stores per country
bycountry <- bycountry %>%
group_by(country,code,code3,region,population) %>%
summarise(stores=n())
bycountry <- as.data.frame(bycountry)
#
# # need to type cast for numerica calculation
bycountry$population = as.double(bycountry$population)
#
# # byregion includes total population and total number of stores
byregion <- bycountry %>%
select(region, population, stores) %>%
group_by(region) %>%
summarise (population=sum(population),stores=sum(stores))
runApp()
runApp()
runApp()
bycountry
colnames(us_data)[-1]
colnames(us_data)
colnames(bycountry)
olnames(bycountry[c(T,F,F,T,T,T)])
colnames(bycountry[c(T,F,F,T,T,T)])
runApp()
runApp()
runApp()
# What city or country has the highest number of Starbucks stores per capita?
# plot graph of number of stores filled by country
# What two Starbucks locations are the closest in proximity to one another?
# What location on Earth is farthest from a Starbucks?
# How has Starbucks expanded overseas?
# licensed vs partnership
library(dplyr)
library(data.table)
library(tidyr)
setwd("/Users/bruce/Desktop/DataScienceBootcamp/ShinyProject/Starbucks")
sbux_file <- fread('./starbucks_locations.csv')
pop_file  <- fread('./population_us.csv')
worldpop_file <- fread('./population_world.csv')
ctycode_file <- fread('./country_codes.csv')
# update all column names to lowercase
sbux_file <- setnames(sbux_file, tolower(colnames(sbux_file)))
# update column name to state
sbux_file <- plyr::rename(sbux_file, c("state/province"="state"))
d_lonlat <- sbux_file %>%
filter (country=='US') %>%
select( state, city, country, lon=longitude, lat=latitude, postcode)
d_lonlat$postcode = substr(d_lonlat$postcode, 0, 5)
g_lonlat <- sbux_file %>%
select(country, lon=longitude, lat=latitude)
################################# Domestic ############################################
# return all US stores
us_file <- sbux_file %>% filter(country=='US')
# create lookup table for state names
state_df  <- as.data.frame(state.name)
state_df$code=state.abb
# get state codes and population_by_state
us_file <- as.data.frame(us_file)
us_file <- us_file %>% left_join(state_df, by=c("state"="code"))
pop_file<- as.data.frame(pop_file)
us_file$state.name = as.character(us_file$state.name)
us_file <- us_file %>% left_join(pop_file, by=c("state.name"="State"))
us_file <- as.data.table(us_file)
# select only columns required for this dataset
us_data <- us_file %>%
select(statename=state.name,state,population='2018 Population', rank=Rank)
us_data <- as.data.table(us_data)
us_data <- us_data %>%
group_by(statename, state, population, rank) %>%
summarise(stores=n())
us_data <- as.data.frame(us_data)
us_data <- us_data %>% drop_na()
rownames(us_data) <- NULL
d.choice <- colnames(us_data)[-1]
worldpop_file <- worldpop_file %>% select(countrycode="Country Code",population="2016")
world_data <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name',
city,
ownership=`ownership type`,
store=`store number`,
lon = longitude,
lat = latitude
)
#
# # left join on starbucks stores world wide with countrycode lookup to
# # include ISO3166-1-Alpha-3 country code to use for population data
bycountry <- NULL
bycountry <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name'
)
# # get population data for each corresponding country
bycountry <-
left_join(bycountry,worldpop_file, by=c("code3"="countrycode"))
bycountry <- bycountry %>% select ( country, code, code3, region, population)
# For some reason, Taiwan's country name was unavailable
bycountry$country[bycountry$code=='TW'] = 'Taiwan'
colnames(us_data)[-1]
colnames(us_data)
runApp()
runApp()
shiny::runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
d_lonlat
g_lonlat
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
cood_file
coord_file
coord_file
g_lonlat
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
us_file
d_lonlat
d_lonlat <- sbux_file %>%
filter (country=='US') %>%
select( state, city, country, lon=longitude, lat=latitude, postcode)
d_lonlat
us_file$state
d_lonlat <- us_file %>%
select( state, state.name, city, country, lon=longitude, lat=latitude, postcode)
d_lonlat
d_lonlat$postcode = substr(d_lonlat$postcode, 0, 5)
d_lonlat
d_lonlat[state.name=='Alaska']
g_lonlat
bycountry
sbux_file
g_lonlat <- bycountry %>%
select(country,code, lon=longitude, lat=latitude)
#
# # left join on starbucks stores world wide with countrycode lookup to
# # include ISO3166-1-Alpha-3 country code to use for population data
bycountry <- NULL
bycountry <-
left_join(sbux_file,ctycode_file, by=c("country"="ISO3166-1-Alpha-2")) %>%
select(country=official_name_en,
code=country,
code3='ISO3166-1-Alpha-3',
region='Region Name',
longitude,
latitude
)
# # get population data for each corresponding country
bycountry <-
left_join(bycountry,worldpop_file, by=c("code3"="countrycode"))
###### Generate global coordinates so we can get country names
g_lonlat <- bycountry %>%
select(country,code, lon=longitude, lat=latitude)
g_lonlat
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
g_lonlat
g_lonlat[country=='Argentina']
g_lonlat[g_lonlat$country=='Argentina']
g_lonlat[country]
g_lonlat
g_lonlat$country
d_lonlat
d_lonlat[state.name=='Alaska']
g_lonlat
g_lonlat[country=='Andorra']
class(d_lonlat)
class(g_lonlat)
as.data.table(g_lonlat)
class(g_lonlat)
g_lonlat <- as.data.table(g_lonlat)
class(g_lonlat)
g_lonlat[country=='Andorra']
g_lonlat[country=='Brazil']
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
rowcount(coord_file)
rownum(coord_file)
coord_file
bycountry
nrow(bycountry)
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example')
state_vars <- us_data$statename
state_vars
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example')
allzips
class(state_vars)
append(state_vars, "1-ALL")
order(append(state_vars, "1-ALL"))
state_vars[order(append(state_vars, "1-ALL"))]
append(state_vars, "1-ALL")
stat_vars <- append(state_vars, "1-ALL")
stat_vars
stat_vars[order(stat_vars)]
country_var <- append(country_var, "1-ALL")
country_var[order(country_var)]
country_var
country_var <- bycountry$country
country_var <- append(country_var, "1-ALL")
country_var[order(country_var)]
country_var
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
stat_vars
stat_vars[order(stat_vars)]
stat_vars <- append(state_vars, "1-ALL")
stat_vars
country_var
stat_vars <- append(state_vars, "1-ALL")
stat_vars <- stat_vars[order(stat_vars)]
country_var <- append(country_var, "1-ALL")
country_var <- country_var[order(country_var)]
country_var
stat_vars
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
bycountry
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example')
shiny::runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
runApp('~/Desktop/DataScienceBootcamp/shiny-examples/063-superzip-example_test')
